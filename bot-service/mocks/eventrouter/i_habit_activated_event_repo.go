// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package eventrouter

import (
	"context"
	"main/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IHabitActivatedEventRepoMock implements eventrouter.iHabitActivatedEventRepo
type IHabitActivatedEventRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendHabitActivatedEvent          func(ctx context.Context, event domain.HabitActivatedEvent) (err error)
	inspectFuncSendHabitActivatedEvent   func(ctx context.Context, event domain.HabitActivatedEvent)
	afterSendHabitActivatedEventCounter  uint64
	beforeSendHabitActivatedEventCounter uint64
	SendHabitActivatedEventMock          mIHabitActivatedEventRepoMockSendHabitActivatedEvent
}

// NewIHabitActivatedEventRepoMock returns a mock for eventrouter.iHabitActivatedEventRepo
func NewIHabitActivatedEventRepoMock(t minimock.Tester) *IHabitActivatedEventRepoMock {
	m := &IHabitActivatedEventRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendHabitActivatedEventMock = mIHabitActivatedEventRepoMockSendHabitActivatedEvent{mock: m}
	m.SendHabitActivatedEventMock.callArgs = []*IHabitActivatedEventRepoMockSendHabitActivatedEventParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIHabitActivatedEventRepoMockSendHabitActivatedEvent struct {
	optional           bool
	mock               *IHabitActivatedEventRepoMock
	defaultExpectation *IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation
	expectations       []*IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation

	callArgs []*IHabitActivatedEventRepoMockSendHabitActivatedEventParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation specifies expectation struct of the iHabitActivatedEventRepo.SendHabitActivatedEvent
type IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation struct {
	mock      *IHabitActivatedEventRepoMock
	params    *IHabitActivatedEventRepoMockSendHabitActivatedEventParams
	paramPtrs *IHabitActivatedEventRepoMockSendHabitActivatedEventParamPtrs
	results   *IHabitActivatedEventRepoMockSendHabitActivatedEventResults
	Counter   uint64
}

// IHabitActivatedEventRepoMockSendHabitActivatedEventParams contains parameters of the iHabitActivatedEventRepo.SendHabitActivatedEvent
type IHabitActivatedEventRepoMockSendHabitActivatedEventParams struct {
	ctx   context.Context
	event domain.HabitActivatedEvent
}

// IHabitActivatedEventRepoMockSendHabitActivatedEventParamPtrs contains pointers to parameters of the iHabitActivatedEventRepo.SendHabitActivatedEvent
type IHabitActivatedEventRepoMockSendHabitActivatedEventParamPtrs struct {
	ctx   *context.Context
	event *domain.HabitActivatedEvent
}

// IHabitActivatedEventRepoMockSendHabitActivatedEventResults contains results of the iHabitActivatedEventRepo.SendHabitActivatedEvent
type IHabitActivatedEventRepoMockSendHabitActivatedEventResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Optional() *mIHabitActivatedEventRepoMockSendHabitActivatedEvent {
	mmSendHabitActivatedEvent.optional = true
	return mmSendHabitActivatedEvent
}

// Expect sets up expected params for iHabitActivatedEventRepo.SendHabitActivatedEvent
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Expect(ctx context.Context, event domain.HabitActivatedEvent) *mIHabitActivatedEventRepoMockSendHabitActivatedEvent {
	if mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Set")
	}

	if mmSendHabitActivatedEvent.defaultExpectation == nil {
		mmSendHabitActivatedEvent.defaultExpectation = &IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation{}
	}

	if mmSendHabitActivatedEvent.defaultExpectation.paramPtrs != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by ExpectParams functions")
	}

	mmSendHabitActivatedEvent.defaultExpectation.params = &IHabitActivatedEventRepoMockSendHabitActivatedEventParams{ctx, event}
	for _, e := range mmSendHabitActivatedEvent.expectations {
		if minimock.Equal(e.params, mmSendHabitActivatedEvent.defaultExpectation.params) {
			mmSendHabitActivatedEvent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendHabitActivatedEvent.defaultExpectation.params)
		}
	}

	return mmSendHabitActivatedEvent
}

// ExpectCtxParam1 sets up expected param ctx for iHabitActivatedEventRepo.SendHabitActivatedEvent
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) ExpectCtxParam1(ctx context.Context) *mIHabitActivatedEventRepoMockSendHabitActivatedEvent {
	if mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Set")
	}

	if mmSendHabitActivatedEvent.defaultExpectation == nil {
		mmSendHabitActivatedEvent.defaultExpectation = &IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation{}
	}

	if mmSendHabitActivatedEvent.defaultExpectation.params != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Expect")
	}

	if mmSendHabitActivatedEvent.defaultExpectation.paramPtrs == nil {
		mmSendHabitActivatedEvent.defaultExpectation.paramPtrs = &IHabitActivatedEventRepoMockSendHabitActivatedEventParamPtrs{}
	}
	mmSendHabitActivatedEvent.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSendHabitActivatedEvent
}

// ExpectEventParam2 sets up expected param event for iHabitActivatedEventRepo.SendHabitActivatedEvent
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) ExpectEventParam2(event domain.HabitActivatedEvent) *mIHabitActivatedEventRepoMockSendHabitActivatedEvent {
	if mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Set")
	}

	if mmSendHabitActivatedEvent.defaultExpectation == nil {
		mmSendHabitActivatedEvent.defaultExpectation = &IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation{}
	}

	if mmSendHabitActivatedEvent.defaultExpectation.params != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Expect")
	}

	if mmSendHabitActivatedEvent.defaultExpectation.paramPtrs == nil {
		mmSendHabitActivatedEvent.defaultExpectation.paramPtrs = &IHabitActivatedEventRepoMockSendHabitActivatedEventParamPtrs{}
	}
	mmSendHabitActivatedEvent.defaultExpectation.paramPtrs.event = &event

	return mmSendHabitActivatedEvent
}

// Inspect accepts an inspector function that has same arguments as the iHabitActivatedEventRepo.SendHabitActivatedEvent
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Inspect(f func(ctx context.Context, event domain.HabitActivatedEvent)) *mIHabitActivatedEventRepoMockSendHabitActivatedEvent {
	if mmSendHabitActivatedEvent.mock.inspectFuncSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("Inspect function is already set for IHabitActivatedEventRepoMock.SendHabitActivatedEvent")
	}

	mmSendHabitActivatedEvent.mock.inspectFuncSendHabitActivatedEvent = f

	return mmSendHabitActivatedEvent
}

// Return sets up results that will be returned by iHabitActivatedEventRepo.SendHabitActivatedEvent
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Return(err error) *IHabitActivatedEventRepoMock {
	if mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Set")
	}

	if mmSendHabitActivatedEvent.defaultExpectation == nil {
		mmSendHabitActivatedEvent.defaultExpectation = &IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation{mock: mmSendHabitActivatedEvent.mock}
	}
	mmSendHabitActivatedEvent.defaultExpectation.results = &IHabitActivatedEventRepoMockSendHabitActivatedEventResults{err}
	return mmSendHabitActivatedEvent.mock
}

// Set uses given function f to mock the iHabitActivatedEventRepo.SendHabitActivatedEvent method
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Set(f func(ctx context.Context, event domain.HabitActivatedEvent) (err error)) *IHabitActivatedEventRepoMock {
	if mmSendHabitActivatedEvent.defaultExpectation != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("Default expectation is already set for the iHabitActivatedEventRepo.SendHabitActivatedEvent method")
	}

	if len(mmSendHabitActivatedEvent.expectations) > 0 {
		mmSendHabitActivatedEvent.mock.t.Fatalf("Some expectations are already set for the iHabitActivatedEventRepo.SendHabitActivatedEvent method")
	}

	mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent = f
	return mmSendHabitActivatedEvent.mock
}

// When sets expectation for the iHabitActivatedEventRepo.SendHabitActivatedEvent which will trigger the result defined by the following
// Then helper
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) When(ctx context.Context, event domain.HabitActivatedEvent) *IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation {
	if mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.mock.t.Fatalf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock is already set by Set")
	}

	expectation := &IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation{
		mock:   mmSendHabitActivatedEvent.mock,
		params: &IHabitActivatedEventRepoMockSendHabitActivatedEventParams{ctx, event},
	}
	mmSendHabitActivatedEvent.expectations = append(mmSendHabitActivatedEvent.expectations, expectation)
	return expectation
}

// Then sets up iHabitActivatedEventRepo.SendHabitActivatedEvent return parameters for the expectation previously defined by the When method
func (e *IHabitActivatedEventRepoMockSendHabitActivatedEventExpectation) Then(err error) *IHabitActivatedEventRepoMock {
	e.results = &IHabitActivatedEventRepoMockSendHabitActivatedEventResults{err}
	return e.mock
}

// Times sets number of times iHabitActivatedEventRepo.SendHabitActivatedEvent should be invoked
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Times(n uint64) *mIHabitActivatedEventRepoMockSendHabitActivatedEvent {
	if n == 0 {
		mmSendHabitActivatedEvent.mock.t.Fatalf("Times of IHabitActivatedEventRepoMock.SendHabitActivatedEvent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendHabitActivatedEvent.expectedInvocations, n)
	return mmSendHabitActivatedEvent
}

func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) invocationsDone() bool {
	if len(mmSendHabitActivatedEvent.expectations) == 0 && mmSendHabitActivatedEvent.defaultExpectation == nil && mmSendHabitActivatedEvent.mock.funcSendHabitActivatedEvent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendHabitActivatedEvent.mock.afterSendHabitActivatedEventCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendHabitActivatedEvent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendHabitActivatedEvent implements eventrouter.iHabitActivatedEventRepo
func (mmSendHabitActivatedEvent *IHabitActivatedEventRepoMock) SendHabitActivatedEvent(ctx context.Context, event domain.HabitActivatedEvent) (err error) {
	mm_atomic.AddUint64(&mmSendHabitActivatedEvent.beforeSendHabitActivatedEventCounter, 1)
	defer mm_atomic.AddUint64(&mmSendHabitActivatedEvent.afterSendHabitActivatedEventCounter, 1)

	if mmSendHabitActivatedEvent.inspectFuncSendHabitActivatedEvent != nil {
		mmSendHabitActivatedEvent.inspectFuncSendHabitActivatedEvent(ctx, event)
	}

	mm_params := IHabitActivatedEventRepoMockSendHabitActivatedEventParams{ctx, event}

	// Record call args
	mmSendHabitActivatedEvent.SendHabitActivatedEventMock.mutex.Lock()
	mmSendHabitActivatedEvent.SendHabitActivatedEventMock.callArgs = append(mmSendHabitActivatedEvent.SendHabitActivatedEventMock.callArgs, &mm_params)
	mmSendHabitActivatedEvent.SendHabitActivatedEventMock.mutex.Unlock()

	for _, e := range mmSendHabitActivatedEvent.SendHabitActivatedEventMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendHabitActivatedEvent.SendHabitActivatedEventMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendHabitActivatedEvent.SendHabitActivatedEventMock.defaultExpectation.Counter, 1)
		mm_want := mmSendHabitActivatedEvent.SendHabitActivatedEventMock.defaultExpectation.params
		mm_want_ptrs := mmSendHabitActivatedEvent.SendHabitActivatedEventMock.defaultExpectation.paramPtrs

		mm_got := IHabitActivatedEventRepoMockSendHabitActivatedEventParams{ctx, event}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendHabitActivatedEvent.t.Errorf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.event != nil && !minimock.Equal(*mm_want_ptrs.event, mm_got.event) {
				mmSendHabitActivatedEvent.t.Errorf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent got unexpected parameter event, want: %#v, got: %#v%s\n", *mm_want_ptrs.event, mm_got.event, minimock.Diff(*mm_want_ptrs.event, mm_got.event))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendHabitActivatedEvent.t.Errorf("IHabitActivatedEventRepoMock.SendHabitActivatedEvent got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendHabitActivatedEvent.SendHabitActivatedEventMock.defaultExpectation.results
		if mm_results == nil {
			mmSendHabitActivatedEvent.t.Fatal("No results are set for the IHabitActivatedEventRepoMock.SendHabitActivatedEvent")
		}
		return (*mm_results).err
	}
	if mmSendHabitActivatedEvent.funcSendHabitActivatedEvent != nil {
		return mmSendHabitActivatedEvent.funcSendHabitActivatedEvent(ctx, event)
	}
	mmSendHabitActivatedEvent.t.Fatalf("Unexpected call to IHabitActivatedEventRepoMock.SendHabitActivatedEvent. %v %v", ctx, event)
	return
}

// SendHabitActivatedEventAfterCounter returns a count of finished IHabitActivatedEventRepoMock.SendHabitActivatedEvent invocations
func (mmSendHabitActivatedEvent *IHabitActivatedEventRepoMock) SendHabitActivatedEventAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendHabitActivatedEvent.afterSendHabitActivatedEventCounter)
}

// SendHabitActivatedEventBeforeCounter returns a count of IHabitActivatedEventRepoMock.SendHabitActivatedEvent invocations
func (mmSendHabitActivatedEvent *IHabitActivatedEventRepoMock) SendHabitActivatedEventBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendHabitActivatedEvent.beforeSendHabitActivatedEventCounter)
}

// Calls returns a list of arguments used in each call to IHabitActivatedEventRepoMock.SendHabitActivatedEvent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendHabitActivatedEvent *mIHabitActivatedEventRepoMockSendHabitActivatedEvent) Calls() []*IHabitActivatedEventRepoMockSendHabitActivatedEventParams {
	mmSendHabitActivatedEvent.mutex.RLock()

	argCopy := make([]*IHabitActivatedEventRepoMockSendHabitActivatedEventParams, len(mmSendHabitActivatedEvent.callArgs))
	copy(argCopy, mmSendHabitActivatedEvent.callArgs)

	mmSendHabitActivatedEvent.mutex.RUnlock()

	return argCopy
}

// MinimockSendHabitActivatedEventDone returns true if the count of the SendHabitActivatedEvent invocations corresponds
// the number of defined expectations
func (m *IHabitActivatedEventRepoMock) MinimockSendHabitActivatedEventDone() bool {
	if m.SendHabitActivatedEventMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendHabitActivatedEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendHabitActivatedEventMock.invocationsDone()
}

// MinimockSendHabitActivatedEventInspect logs each unmet expectation
func (m *IHabitActivatedEventRepoMock) MinimockSendHabitActivatedEventInspect() {
	for _, e := range m.SendHabitActivatedEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IHabitActivatedEventRepoMock.SendHabitActivatedEvent with params: %#v", *e.params)
		}
	}

	afterSendHabitActivatedEventCounter := mm_atomic.LoadUint64(&m.afterSendHabitActivatedEventCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendHabitActivatedEventMock.defaultExpectation != nil && afterSendHabitActivatedEventCounter < 1 {
		if m.SendHabitActivatedEventMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IHabitActivatedEventRepoMock.SendHabitActivatedEvent")
		} else {
			m.t.Errorf("Expected call to IHabitActivatedEventRepoMock.SendHabitActivatedEvent with params: %#v", *m.SendHabitActivatedEventMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendHabitActivatedEvent != nil && afterSendHabitActivatedEventCounter < 1 {
		m.t.Error("Expected call to IHabitActivatedEventRepoMock.SendHabitActivatedEvent")
	}

	if !m.SendHabitActivatedEventMock.invocationsDone() && afterSendHabitActivatedEventCounter > 0 {
		m.t.Errorf("Expected %d calls to IHabitActivatedEventRepoMock.SendHabitActivatedEvent but found %d calls",
			mm_atomic.LoadUint64(&m.SendHabitActivatedEventMock.expectedInvocations), afterSendHabitActivatedEventCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IHabitActivatedEventRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendHabitActivatedEventInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IHabitActivatedEventRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IHabitActivatedEventRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendHabitActivatedEventDone()
}
