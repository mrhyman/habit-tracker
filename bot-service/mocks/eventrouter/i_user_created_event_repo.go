// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package eventrouter

import (
	"context"
	"main/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IUserCreatedEventRepoMock implements eventrouter.iUserCreatedEventRepo
type IUserCreatedEventRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSendUserCreatedEvent          func(ctx context.Context, event domain.UserCreatedEvent) (err error)
	inspectFuncSendUserCreatedEvent   func(ctx context.Context, event domain.UserCreatedEvent)
	afterSendUserCreatedEventCounter  uint64
	beforeSendUserCreatedEventCounter uint64
	SendUserCreatedEventMock          mIUserCreatedEventRepoMockSendUserCreatedEvent
}

// NewIUserCreatedEventRepoMock returns a mock for eventrouter.iUserCreatedEventRepo
func NewIUserCreatedEventRepoMock(t minimock.Tester) *IUserCreatedEventRepoMock {
	m := &IUserCreatedEventRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendUserCreatedEventMock = mIUserCreatedEventRepoMockSendUserCreatedEvent{mock: m}
	m.SendUserCreatedEventMock.callArgs = []*IUserCreatedEventRepoMockSendUserCreatedEventParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIUserCreatedEventRepoMockSendUserCreatedEvent struct {
	optional           bool
	mock               *IUserCreatedEventRepoMock
	defaultExpectation *IUserCreatedEventRepoMockSendUserCreatedEventExpectation
	expectations       []*IUserCreatedEventRepoMockSendUserCreatedEventExpectation

	callArgs []*IUserCreatedEventRepoMockSendUserCreatedEventParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// IUserCreatedEventRepoMockSendUserCreatedEventExpectation specifies expectation struct of the iUserCreatedEventRepo.SendUserCreatedEvent
type IUserCreatedEventRepoMockSendUserCreatedEventExpectation struct {
	mock      *IUserCreatedEventRepoMock
	params    *IUserCreatedEventRepoMockSendUserCreatedEventParams
	paramPtrs *IUserCreatedEventRepoMockSendUserCreatedEventParamPtrs
	results   *IUserCreatedEventRepoMockSendUserCreatedEventResults
	Counter   uint64
}

// IUserCreatedEventRepoMockSendUserCreatedEventParams contains parameters of the iUserCreatedEventRepo.SendUserCreatedEvent
type IUserCreatedEventRepoMockSendUserCreatedEventParams struct {
	ctx   context.Context
	event domain.UserCreatedEvent
}

// IUserCreatedEventRepoMockSendUserCreatedEventParamPtrs contains pointers to parameters of the iUserCreatedEventRepo.SendUserCreatedEvent
type IUserCreatedEventRepoMockSendUserCreatedEventParamPtrs struct {
	ctx   *context.Context
	event *domain.UserCreatedEvent
}

// IUserCreatedEventRepoMockSendUserCreatedEventResults contains results of the iUserCreatedEventRepo.SendUserCreatedEvent
type IUserCreatedEventRepoMockSendUserCreatedEventResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Optional() *mIUserCreatedEventRepoMockSendUserCreatedEvent {
	mmSendUserCreatedEvent.optional = true
	return mmSendUserCreatedEvent
}

// Expect sets up expected params for iUserCreatedEventRepo.SendUserCreatedEvent
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Expect(ctx context.Context, event domain.UserCreatedEvent) *mIUserCreatedEventRepoMockSendUserCreatedEvent {
	if mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Set")
	}

	if mmSendUserCreatedEvent.defaultExpectation == nil {
		mmSendUserCreatedEvent.defaultExpectation = &IUserCreatedEventRepoMockSendUserCreatedEventExpectation{}
	}

	if mmSendUserCreatedEvent.defaultExpectation.paramPtrs != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by ExpectParams functions")
	}

	mmSendUserCreatedEvent.defaultExpectation.params = &IUserCreatedEventRepoMockSendUserCreatedEventParams{ctx, event}
	for _, e := range mmSendUserCreatedEvent.expectations {
		if minimock.Equal(e.params, mmSendUserCreatedEvent.defaultExpectation.params) {
			mmSendUserCreatedEvent.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendUserCreatedEvent.defaultExpectation.params)
		}
	}

	return mmSendUserCreatedEvent
}

// ExpectCtxParam1 sets up expected param ctx for iUserCreatedEventRepo.SendUserCreatedEvent
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) ExpectCtxParam1(ctx context.Context) *mIUserCreatedEventRepoMockSendUserCreatedEvent {
	if mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Set")
	}

	if mmSendUserCreatedEvent.defaultExpectation == nil {
		mmSendUserCreatedEvent.defaultExpectation = &IUserCreatedEventRepoMockSendUserCreatedEventExpectation{}
	}

	if mmSendUserCreatedEvent.defaultExpectation.params != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Expect")
	}

	if mmSendUserCreatedEvent.defaultExpectation.paramPtrs == nil {
		mmSendUserCreatedEvent.defaultExpectation.paramPtrs = &IUserCreatedEventRepoMockSendUserCreatedEventParamPtrs{}
	}
	mmSendUserCreatedEvent.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSendUserCreatedEvent
}

// ExpectEventParam2 sets up expected param event for iUserCreatedEventRepo.SendUserCreatedEvent
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) ExpectEventParam2(event domain.UserCreatedEvent) *mIUserCreatedEventRepoMockSendUserCreatedEvent {
	if mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Set")
	}

	if mmSendUserCreatedEvent.defaultExpectation == nil {
		mmSendUserCreatedEvent.defaultExpectation = &IUserCreatedEventRepoMockSendUserCreatedEventExpectation{}
	}

	if mmSendUserCreatedEvent.defaultExpectation.params != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Expect")
	}

	if mmSendUserCreatedEvent.defaultExpectation.paramPtrs == nil {
		mmSendUserCreatedEvent.defaultExpectation.paramPtrs = &IUserCreatedEventRepoMockSendUserCreatedEventParamPtrs{}
	}
	mmSendUserCreatedEvent.defaultExpectation.paramPtrs.event = &event

	return mmSendUserCreatedEvent
}

// Inspect accepts an inspector function that has same arguments as the iUserCreatedEventRepo.SendUserCreatedEvent
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Inspect(f func(ctx context.Context, event domain.UserCreatedEvent)) *mIUserCreatedEventRepoMockSendUserCreatedEvent {
	if mmSendUserCreatedEvent.mock.inspectFuncSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("Inspect function is already set for IUserCreatedEventRepoMock.SendUserCreatedEvent")
	}

	mmSendUserCreatedEvent.mock.inspectFuncSendUserCreatedEvent = f

	return mmSendUserCreatedEvent
}

// Return sets up results that will be returned by iUserCreatedEventRepo.SendUserCreatedEvent
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Return(err error) *IUserCreatedEventRepoMock {
	if mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Set")
	}

	if mmSendUserCreatedEvent.defaultExpectation == nil {
		mmSendUserCreatedEvent.defaultExpectation = &IUserCreatedEventRepoMockSendUserCreatedEventExpectation{mock: mmSendUserCreatedEvent.mock}
	}
	mmSendUserCreatedEvent.defaultExpectation.results = &IUserCreatedEventRepoMockSendUserCreatedEventResults{err}
	return mmSendUserCreatedEvent.mock
}

// Set uses given function f to mock the iUserCreatedEventRepo.SendUserCreatedEvent method
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Set(f func(ctx context.Context, event domain.UserCreatedEvent) (err error)) *IUserCreatedEventRepoMock {
	if mmSendUserCreatedEvent.defaultExpectation != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("Default expectation is already set for the iUserCreatedEventRepo.SendUserCreatedEvent method")
	}

	if len(mmSendUserCreatedEvent.expectations) > 0 {
		mmSendUserCreatedEvent.mock.t.Fatalf("Some expectations are already set for the iUserCreatedEventRepo.SendUserCreatedEvent method")
	}

	mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent = f
	return mmSendUserCreatedEvent.mock
}

// When sets expectation for the iUserCreatedEventRepo.SendUserCreatedEvent which will trigger the result defined by the following
// Then helper
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) When(ctx context.Context, event domain.UserCreatedEvent) *IUserCreatedEventRepoMockSendUserCreatedEventExpectation {
	if mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.mock.t.Fatalf("IUserCreatedEventRepoMock.SendUserCreatedEvent mock is already set by Set")
	}

	expectation := &IUserCreatedEventRepoMockSendUserCreatedEventExpectation{
		mock:   mmSendUserCreatedEvent.mock,
		params: &IUserCreatedEventRepoMockSendUserCreatedEventParams{ctx, event},
	}
	mmSendUserCreatedEvent.expectations = append(mmSendUserCreatedEvent.expectations, expectation)
	return expectation
}

// Then sets up iUserCreatedEventRepo.SendUserCreatedEvent return parameters for the expectation previously defined by the When method
func (e *IUserCreatedEventRepoMockSendUserCreatedEventExpectation) Then(err error) *IUserCreatedEventRepoMock {
	e.results = &IUserCreatedEventRepoMockSendUserCreatedEventResults{err}
	return e.mock
}

// Times sets number of times iUserCreatedEventRepo.SendUserCreatedEvent should be invoked
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Times(n uint64) *mIUserCreatedEventRepoMockSendUserCreatedEvent {
	if n == 0 {
		mmSendUserCreatedEvent.mock.t.Fatalf("Times of IUserCreatedEventRepoMock.SendUserCreatedEvent mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendUserCreatedEvent.expectedInvocations, n)
	return mmSendUserCreatedEvent
}

func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) invocationsDone() bool {
	if len(mmSendUserCreatedEvent.expectations) == 0 && mmSendUserCreatedEvent.defaultExpectation == nil && mmSendUserCreatedEvent.mock.funcSendUserCreatedEvent == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendUserCreatedEvent.mock.afterSendUserCreatedEventCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendUserCreatedEvent.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendUserCreatedEvent implements eventrouter.iUserCreatedEventRepo
func (mmSendUserCreatedEvent *IUserCreatedEventRepoMock) SendUserCreatedEvent(ctx context.Context, event domain.UserCreatedEvent) (err error) {
	mm_atomic.AddUint64(&mmSendUserCreatedEvent.beforeSendUserCreatedEventCounter, 1)
	defer mm_atomic.AddUint64(&mmSendUserCreatedEvent.afterSendUserCreatedEventCounter, 1)

	if mmSendUserCreatedEvent.inspectFuncSendUserCreatedEvent != nil {
		mmSendUserCreatedEvent.inspectFuncSendUserCreatedEvent(ctx, event)
	}

	mm_params := IUserCreatedEventRepoMockSendUserCreatedEventParams{ctx, event}

	// Record call args
	mmSendUserCreatedEvent.SendUserCreatedEventMock.mutex.Lock()
	mmSendUserCreatedEvent.SendUserCreatedEventMock.callArgs = append(mmSendUserCreatedEvent.SendUserCreatedEventMock.callArgs, &mm_params)
	mmSendUserCreatedEvent.SendUserCreatedEventMock.mutex.Unlock()

	for _, e := range mmSendUserCreatedEvent.SendUserCreatedEventMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendUserCreatedEvent.SendUserCreatedEventMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendUserCreatedEvent.SendUserCreatedEventMock.defaultExpectation.Counter, 1)
		mm_want := mmSendUserCreatedEvent.SendUserCreatedEventMock.defaultExpectation.params
		mm_want_ptrs := mmSendUserCreatedEvent.SendUserCreatedEventMock.defaultExpectation.paramPtrs

		mm_got := IUserCreatedEventRepoMockSendUserCreatedEventParams{ctx, event}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendUserCreatedEvent.t.Errorf("IUserCreatedEventRepoMock.SendUserCreatedEvent got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.event != nil && !minimock.Equal(*mm_want_ptrs.event, mm_got.event) {
				mmSendUserCreatedEvent.t.Errorf("IUserCreatedEventRepoMock.SendUserCreatedEvent got unexpected parameter event, want: %#v, got: %#v%s\n", *mm_want_ptrs.event, mm_got.event, minimock.Diff(*mm_want_ptrs.event, mm_got.event))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendUserCreatedEvent.t.Errorf("IUserCreatedEventRepoMock.SendUserCreatedEvent got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendUserCreatedEvent.SendUserCreatedEventMock.defaultExpectation.results
		if mm_results == nil {
			mmSendUserCreatedEvent.t.Fatal("No results are set for the IUserCreatedEventRepoMock.SendUserCreatedEvent")
		}
		return (*mm_results).err
	}
	if mmSendUserCreatedEvent.funcSendUserCreatedEvent != nil {
		return mmSendUserCreatedEvent.funcSendUserCreatedEvent(ctx, event)
	}
	mmSendUserCreatedEvent.t.Fatalf("Unexpected call to IUserCreatedEventRepoMock.SendUserCreatedEvent. %v %v", ctx, event)
	return
}

// SendUserCreatedEventAfterCounter returns a count of finished IUserCreatedEventRepoMock.SendUserCreatedEvent invocations
func (mmSendUserCreatedEvent *IUserCreatedEventRepoMock) SendUserCreatedEventAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendUserCreatedEvent.afterSendUserCreatedEventCounter)
}

// SendUserCreatedEventBeforeCounter returns a count of IUserCreatedEventRepoMock.SendUserCreatedEvent invocations
func (mmSendUserCreatedEvent *IUserCreatedEventRepoMock) SendUserCreatedEventBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendUserCreatedEvent.beforeSendUserCreatedEventCounter)
}

// Calls returns a list of arguments used in each call to IUserCreatedEventRepoMock.SendUserCreatedEvent.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendUserCreatedEvent *mIUserCreatedEventRepoMockSendUserCreatedEvent) Calls() []*IUserCreatedEventRepoMockSendUserCreatedEventParams {
	mmSendUserCreatedEvent.mutex.RLock()

	argCopy := make([]*IUserCreatedEventRepoMockSendUserCreatedEventParams, len(mmSendUserCreatedEvent.callArgs))
	copy(argCopy, mmSendUserCreatedEvent.callArgs)

	mmSendUserCreatedEvent.mutex.RUnlock()

	return argCopy
}

// MinimockSendUserCreatedEventDone returns true if the count of the SendUserCreatedEvent invocations corresponds
// the number of defined expectations
func (m *IUserCreatedEventRepoMock) MinimockSendUserCreatedEventDone() bool {
	if m.SendUserCreatedEventMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendUserCreatedEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendUserCreatedEventMock.invocationsDone()
}

// MinimockSendUserCreatedEventInspect logs each unmet expectation
func (m *IUserCreatedEventRepoMock) MinimockSendUserCreatedEventInspect() {
	for _, e := range m.SendUserCreatedEventMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserCreatedEventRepoMock.SendUserCreatedEvent with params: %#v", *e.params)
		}
	}

	afterSendUserCreatedEventCounter := mm_atomic.LoadUint64(&m.afterSendUserCreatedEventCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendUserCreatedEventMock.defaultExpectation != nil && afterSendUserCreatedEventCounter < 1 {
		if m.SendUserCreatedEventMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserCreatedEventRepoMock.SendUserCreatedEvent")
		} else {
			m.t.Errorf("Expected call to IUserCreatedEventRepoMock.SendUserCreatedEvent with params: %#v", *m.SendUserCreatedEventMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendUserCreatedEvent != nil && afterSendUserCreatedEventCounter < 1 {
		m.t.Error("Expected call to IUserCreatedEventRepoMock.SendUserCreatedEvent")
	}

	if !m.SendUserCreatedEventMock.invocationsDone() && afterSendUserCreatedEventCounter > 0 {
		m.t.Errorf("Expected %d calls to IUserCreatedEventRepoMock.SendUserCreatedEvent but found %d calls",
			mm_atomic.LoadUint64(&m.SendUserCreatedEventMock.expectedInvocations), afterSendUserCreatedEventCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserCreatedEventRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendUserCreatedEventInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserCreatedEventRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserCreatedEventRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendUserCreatedEventDone()
}
