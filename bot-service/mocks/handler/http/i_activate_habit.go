// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package http

import (
	"context"
	"main/internal/usecase/activatehabit"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IActivateHabitMock implements handler.iActivateHabit
type IActivateHabitMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcHandle          func(ctx context.Context, cmd activatehabit.Command) (err error)
	inspectFuncHandle   func(ctx context.Context, cmd activatehabit.Command)
	afterHandleCounter  uint64
	beforeHandleCounter uint64
	HandleMock          mIActivateHabitMockHandle
}

// NewIActivateHabitMock returns a mock for handler.iActivateHabit
func NewIActivateHabitMock(t minimock.Tester) *IActivateHabitMock {
	m := &IActivateHabitMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HandleMock = mIActivateHabitMockHandle{mock: m}
	m.HandleMock.callArgs = []*IActivateHabitMockHandleParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mIActivateHabitMockHandle struct {
	optional           bool
	mock               *IActivateHabitMock
	defaultExpectation *IActivateHabitMockHandleExpectation
	expectations       []*IActivateHabitMockHandleExpectation

	callArgs []*IActivateHabitMockHandleParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// IActivateHabitMockHandleExpectation specifies expectation struct of the iActivateHabit.Handle
type IActivateHabitMockHandleExpectation struct {
	mock      *IActivateHabitMock
	params    *IActivateHabitMockHandleParams
	paramPtrs *IActivateHabitMockHandleParamPtrs
	results   *IActivateHabitMockHandleResults
	Counter   uint64
}

// IActivateHabitMockHandleParams contains parameters of the iActivateHabit.Handle
type IActivateHabitMockHandleParams struct {
	ctx context.Context
	cmd activatehabit.Command
}

// IActivateHabitMockHandleParamPtrs contains pointers to parameters of the iActivateHabit.Handle
type IActivateHabitMockHandleParamPtrs struct {
	ctx *context.Context
	cmd *activatehabit.Command
}

// IActivateHabitMockHandleResults contains results of the iActivateHabit.Handle
type IActivateHabitMockHandleResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHandle *mIActivateHabitMockHandle) Optional() *mIActivateHabitMockHandle {
	mmHandle.optional = true
	return mmHandle
}

// Expect sets up expected params for iActivateHabit.Handle
func (mmHandle *mIActivateHabitMockHandle) Expect(ctx context.Context, cmd activatehabit.Command) *mIActivateHabitMockHandle {
	if mmHandle.mock.funcHandle != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Set")
	}

	if mmHandle.defaultExpectation == nil {
		mmHandle.defaultExpectation = &IActivateHabitMockHandleExpectation{}
	}

	if mmHandle.defaultExpectation.paramPtrs != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by ExpectParams functions")
	}

	mmHandle.defaultExpectation.params = &IActivateHabitMockHandleParams{ctx, cmd}
	for _, e := range mmHandle.expectations {
		if minimock.Equal(e.params, mmHandle.defaultExpectation.params) {
			mmHandle.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHandle.defaultExpectation.params)
		}
	}

	return mmHandle
}

// ExpectCtxParam1 sets up expected param ctx for iActivateHabit.Handle
func (mmHandle *mIActivateHabitMockHandle) ExpectCtxParam1(ctx context.Context) *mIActivateHabitMockHandle {
	if mmHandle.mock.funcHandle != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Set")
	}

	if mmHandle.defaultExpectation == nil {
		mmHandle.defaultExpectation = &IActivateHabitMockHandleExpectation{}
	}

	if mmHandle.defaultExpectation.params != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Expect")
	}

	if mmHandle.defaultExpectation.paramPtrs == nil {
		mmHandle.defaultExpectation.paramPtrs = &IActivateHabitMockHandleParamPtrs{}
	}
	mmHandle.defaultExpectation.paramPtrs.ctx = &ctx

	return mmHandle
}

// ExpectCmdParam2 sets up expected param cmd for iActivateHabit.Handle
func (mmHandle *mIActivateHabitMockHandle) ExpectCmdParam2(cmd activatehabit.Command) *mIActivateHabitMockHandle {
	if mmHandle.mock.funcHandle != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Set")
	}

	if mmHandle.defaultExpectation == nil {
		mmHandle.defaultExpectation = &IActivateHabitMockHandleExpectation{}
	}

	if mmHandle.defaultExpectation.params != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Expect")
	}

	if mmHandle.defaultExpectation.paramPtrs == nil {
		mmHandle.defaultExpectation.paramPtrs = &IActivateHabitMockHandleParamPtrs{}
	}
	mmHandle.defaultExpectation.paramPtrs.cmd = &cmd

	return mmHandle
}

// Inspect accepts an inspector function that has same arguments as the iActivateHabit.Handle
func (mmHandle *mIActivateHabitMockHandle) Inspect(f func(ctx context.Context, cmd activatehabit.Command)) *mIActivateHabitMockHandle {
	if mmHandle.mock.inspectFuncHandle != nil {
		mmHandle.mock.t.Fatalf("Inspect function is already set for IActivateHabitMock.Handle")
	}

	mmHandle.mock.inspectFuncHandle = f

	return mmHandle
}

// Return sets up results that will be returned by iActivateHabit.Handle
func (mmHandle *mIActivateHabitMockHandle) Return(err error) *IActivateHabitMock {
	if mmHandle.mock.funcHandle != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Set")
	}

	if mmHandle.defaultExpectation == nil {
		mmHandle.defaultExpectation = &IActivateHabitMockHandleExpectation{mock: mmHandle.mock}
	}
	mmHandle.defaultExpectation.results = &IActivateHabitMockHandleResults{err}
	return mmHandle.mock
}

// Set uses given function f to mock the iActivateHabit.Handle method
func (mmHandle *mIActivateHabitMockHandle) Set(f func(ctx context.Context, cmd activatehabit.Command) (err error)) *IActivateHabitMock {
	if mmHandle.defaultExpectation != nil {
		mmHandle.mock.t.Fatalf("Default expectation is already set for the iActivateHabit.Handle method")
	}

	if len(mmHandle.expectations) > 0 {
		mmHandle.mock.t.Fatalf("Some expectations are already set for the iActivateHabit.Handle method")
	}

	mmHandle.mock.funcHandle = f
	return mmHandle.mock
}

// When sets expectation for the iActivateHabit.Handle which will trigger the result defined by the following
// Then helper
func (mmHandle *mIActivateHabitMockHandle) When(ctx context.Context, cmd activatehabit.Command) *IActivateHabitMockHandleExpectation {
	if mmHandle.mock.funcHandle != nil {
		mmHandle.mock.t.Fatalf("IActivateHabitMock.Handle mock is already set by Set")
	}

	expectation := &IActivateHabitMockHandleExpectation{
		mock:   mmHandle.mock,
		params: &IActivateHabitMockHandleParams{ctx, cmd},
	}
	mmHandle.expectations = append(mmHandle.expectations, expectation)
	return expectation
}

// Then sets up iActivateHabit.Handle return parameters for the expectation previously defined by the When method
func (e *IActivateHabitMockHandleExpectation) Then(err error) *IActivateHabitMock {
	e.results = &IActivateHabitMockHandleResults{err}
	return e.mock
}

// Times sets number of times iActivateHabit.Handle should be invoked
func (mmHandle *mIActivateHabitMockHandle) Times(n uint64) *mIActivateHabitMockHandle {
	if n == 0 {
		mmHandle.mock.t.Fatalf("Times of IActivateHabitMock.Handle mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHandle.expectedInvocations, n)
	return mmHandle
}

func (mmHandle *mIActivateHabitMockHandle) invocationsDone() bool {
	if len(mmHandle.expectations) == 0 && mmHandle.defaultExpectation == nil && mmHandle.mock.funcHandle == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHandle.mock.afterHandleCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHandle.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Handle implements handler.iActivateHabit
func (mmHandle *IActivateHabitMock) Handle(ctx context.Context, cmd activatehabit.Command) (err error) {
	mm_atomic.AddUint64(&mmHandle.beforeHandleCounter, 1)
	defer mm_atomic.AddUint64(&mmHandle.afterHandleCounter, 1)

	if mmHandle.inspectFuncHandle != nil {
		mmHandle.inspectFuncHandle(ctx, cmd)
	}

	mm_params := IActivateHabitMockHandleParams{ctx, cmd}

	// Record call args
	mmHandle.HandleMock.mutex.Lock()
	mmHandle.HandleMock.callArgs = append(mmHandle.HandleMock.callArgs, &mm_params)
	mmHandle.HandleMock.mutex.Unlock()

	for _, e := range mmHandle.HandleMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmHandle.HandleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHandle.HandleMock.defaultExpectation.Counter, 1)
		mm_want := mmHandle.HandleMock.defaultExpectation.params
		mm_want_ptrs := mmHandle.HandleMock.defaultExpectation.paramPtrs

		mm_got := IActivateHabitMockHandleParams{ctx, cmd}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmHandle.t.Errorf("IActivateHabitMock.Handle got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cmd != nil && !minimock.Equal(*mm_want_ptrs.cmd, mm_got.cmd) {
				mmHandle.t.Errorf("IActivateHabitMock.Handle got unexpected parameter cmd, want: %#v, got: %#v%s\n", *mm_want_ptrs.cmd, mm_got.cmd, minimock.Diff(*mm_want_ptrs.cmd, mm_got.cmd))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHandle.t.Errorf("IActivateHabitMock.Handle got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHandle.HandleMock.defaultExpectation.results
		if mm_results == nil {
			mmHandle.t.Fatal("No results are set for the IActivateHabitMock.Handle")
		}
		return (*mm_results).err
	}
	if mmHandle.funcHandle != nil {
		return mmHandle.funcHandle(ctx, cmd)
	}
	mmHandle.t.Fatalf("Unexpected call to IActivateHabitMock.Handle. %v %v", ctx, cmd)
	return
}

// HandleAfterCounter returns a count of finished IActivateHabitMock.Handle invocations
func (mmHandle *IActivateHabitMock) HandleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandle.afterHandleCounter)
}

// HandleBeforeCounter returns a count of IActivateHabitMock.Handle invocations
func (mmHandle *IActivateHabitMock) HandleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHandle.beforeHandleCounter)
}

// Calls returns a list of arguments used in each call to IActivateHabitMock.Handle.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHandle *mIActivateHabitMockHandle) Calls() []*IActivateHabitMockHandleParams {
	mmHandle.mutex.RLock()

	argCopy := make([]*IActivateHabitMockHandleParams, len(mmHandle.callArgs))
	copy(argCopy, mmHandle.callArgs)

	mmHandle.mutex.RUnlock()

	return argCopy
}

// MinimockHandleDone returns true if the count of the Handle invocations corresponds
// the number of defined expectations
func (m *IActivateHabitMock) MinimockHandleDone() bool {
	if m.HandleMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HandleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HandleMock.invocationsDone()
}

// MinimockHandleInspect logs each unmet expectation
func (m *IActivateHabitMock) MinimockHandleInspect() {
	for _, e := range m.HandleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IActivateHabitMock.Handle with params: %#v", *e.params)
		}
	}

	afterHandleCounter := mm_atomic.LoadUint64(&m.afterHandleCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HandleMock.defaultExpectation != nil && afterHandleCounter < 1 {
		if m.HandleMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IActivateHabitMock.Handle")
		} else {
			m.t.Errorf("Expected call to IActivateHabitMock.Handle with params: %#v", *m.HandleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHandle != nil && afterHandleCounter < 1 {
		m.t.Error("Expected call to IActivateHabitMock.Handle")
	}

	if !m.HandleMock.invocationsDone() && afterHandleCounter > 0 {
		m.t.Errorf("Expected %d calls to IActivateHabitMock.Handle but found %d calls",
			mm_atomic.LoadUint64(&m.HandleMock.expectedInvocations), afterHandleCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IActivateHabitMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockHandleInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IActivateHabitMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IActivateHabitMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHandleDone()
}
