package createUser

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"main/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// IEventRouterMock implements createuser.iEventRouter
type IEventRouterMock struct {
	t minimock.Tester

	funcRouteAllEvents          func(ctx context.Context, events []domain.Event) (err error)
	inspectFuncRouteAllEvents   func(ctx context.Context, events []domain.Event)
	afterRouteAllEventsCounter  uint64
	beforeRouteAllEventsCounter uint64
	RouteAllEventsMock          mIEventRouterMockRouteAllEvents
}

// NewIEventRouterMock returns a mock for createuser.iEventRouter
func NewIEventRouterMock(t minimock.Tester) *IEventRouterMock {
	m := &IEventRouterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RouteAllEventsMock = mIEventRouterMockRouteAllEvents{mock: m}
	m.RouteAllEventsMock.callArgs = []*IEventRouterMockRouteAllEventsParams{}

	return m
}

type mIEventRouterMockRouteAllEvents struct {
	mock               *IEventRouterMock
	defaultExpectation *IEventRouterMockRouteAllEventsExpectation
	expectations       []*IEventRouterMockRouteAllEventsExpectation

	callArgs []*IEventRouterMockRouteAllEventsParams
	mutex    sync.RWMutex
}

// IEventRouterMockRouteAllEventsExpectation specifies expectation struct of the iEventRouter.RouteAllEvents
type IEventRouterMockRouteAllEventsExpectation struct {
	mock    *IEventRouterMock
	params  *IEventRouterMockRouteAllEventsParams
	results *IEventRouterMockRouteAllEventsResults
	Counter uint64
}

// IEventRouterMockRouteAllEventsParams contains parameters of the iEventRouter.RouteAllEvents
type IEventRouterMockRouteAllEventsParams struct {
	ctx    context.Context
	events []domain.Event
}

// IEventRouterMockRouteAllEventsResults contains results of the iEventRouter.RouteAllEvents
type IEventRouterMockRouteAllEventsResults struct {
	err error
}

// Expect sets up expected params for iEventRouter.RouteAllEvents
func (mmRouteAllEvents *mIEventRouterMockRouteAllEvents) Expect(ctx context.Context, events []domain.Event) *mIEventRouterMockRouteAllEvents {
	if mmRouteAllEvents.mock.funcRouteAllEvents != nil {
		mmRouteAllEvents.mock.t.Fatalf("IEventRouterMock.RouteAllEvents mock is already set by Set")
	}

	if mmRouteAllEvents.defaultExpectation == nil {
		mmRouteAllEvents.defaultExpectation = &IEventRouterMockRouteAllEventsExpectation{}
	}

	mmRouteAllEvents.defaultExpectation.params = &IEventRouterMockRouteAllEventsParams{ctx, events}
	for _, e := range mmRouteAllEvents.expectations {
		if minimock.Equal(e.params, mmRouteAllEvents.defaultExpectation.params) {
			mmRouteAllEvents.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRouteAllEvents.defaultExpectation.params)
		}
	}

	return mmRouteAllEvents
}

// Inspect accepts an inspector function that has same arguments as the iEventRouter.RouteAllEvents
func (mmRouteAllEvents *mIEventRouterMockRouteAllEvents) Inspect(f func(ctx context.Context, events []domain.Event)) *mIEventRouterMockRouteAllEvents {
	if mmRouteAllEvents.mock.inspectFuncRouteAllEvents != nil {
		mmRouteAllEvents.mock.t.Fatalf("Inspect function is already set for IEventRouterMock.RouteAllEvents")
	}

	mmRouteAllEvents.mock.inspectFuncRouteAllEvents = f

	return mmRouteAllEvents
}

// Return sets up results that will be returned by iEventRouter.RouteAllEvents
func (mmRouteAllEvents *mIEventRouterMockRouteAllEvents) Return(err error) *IEventRouterMock {
	if mmRouteAllEvents.mock.funcRouteAllEvents != nil {
		mmRouteAllEvents.mock.t.Fatalf("IEventRouterMock.RouteAllEvents mock is already set by Set")
	}

	if mmRouteAllEvents.defaultExpectation == nil {
		mmRouteAllEvents.defaultExpectation = &IEventRouterMockRouteAllEventsExpectation{mock: mmRouteAllEvents.mock}
	}
	mmRouteAllEvents.defaultExpectation.results = &IEventRouterMockRouteAllEventsResults{err}
	return mmRouteAllEvents.mock
}

// Set uses given function f to mock the iEventRouter.RouteAllEvents method
func (mmRouteAllEvents *mIEventRouterMockRouteAllEvents) Set(f func(ctx context.Context, events []domain.Event) (err error)) *IEventRouterMock {
	if mmRouteAllEvents.defaultExpectation != nil {
		mmRouteAllEvents.mock.t.Fatalf("Default expectation is already set for the iEventRouter.RouteAllEvents method")
	}

	if len(mmRouteAllEvents.expectations) > 0 {
		mmRouteAllEvents.mock.t.Fatalf("Some expectations are already set for the iEventRouter.RouteAllEvents method")
	}

	mmRouteAllEvents.mock.funcRouteAllEvents = f
	return mmRouteAllEvents.mock
}

// When sets expectation for the iEventRouter.RouteAllEvents which will trigger the result defined by the following
// Then helper
func (mmRouteAllEvents *mIEventRouterMockRouteAllEvents) When(ctx context.Context, events []domain.Event) *IEventRouterMockRouteAllEventsExpectation {
	if mmRouteAllEvents.mock.funcRouteAllEvents != nil {
		mmRouteAllEvents.mock.t.Fatalf("IEventRouterMock.RouteAllEvents mock is already set by Set")
	}

	expectation := &IEventRouterMockRouteAllEventsExpectation{
		mock:   mmRouteAllEvents.mock,
		params: &IEventRouterMockRouteAllEventsParams{ctx, events},
	}
	mmRouteAllEvents.expectations = append(mmRouteAllEvents.expectations, expectation)
	return expectation
}

// Then sets up iEventRouter.RouteAllEvents return parameters for the expectation previously defined by the When method
func (e *IEventRouterMockRouteAllEventsExpectation) Then(err error) *IEventRouterMock {
	e.results = &IEventRouterMockRouteAllEventsResults{err}
	return e.mock
}

// RouteAllEvents implements createuser.iEventRouter
func (mmRouteAllEvents *IEventRouterMock) RouteAllEvents(ctx context.Context, events []domain.Event) (err error) {
	mm_atomic.AddUint64(&mmRouteAllEvents.beforeRouteAllEventsCounter, 1)
	defer mm_atomic.AddUint64(&mmRouteAllEvents.afterRouteAllEventsCounter, 1)

	if mmRouteAllEvents.inspectFuncRouteAllEvents != nil {
		mmRouteAllEvents.inspectFuncRouteAllEvents(ctx, events)
	}

	mm_params := &IEventRouterMockRouteAllEventsParams{ctx, events}

	// Record call args
	mmRouteAllEvents.RouteAllEventsMock.mutex.Lock()
	mmRouteAllEvents.RouteAllEventsMock.callArgs = append(mmRouteAllEvents.RouteAllEventsMock.callArgs, mm_params)
	mmRouteAllEvents.RouteAllEventsMock.mutex.Unlock()

	for _, e := range mmRouteAllEvents.RouteAllEventsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRouteAllEvents.RouteAllEventsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRouteAllEvents.RouteAllEventsMock.defaultExpectation.Counter, 1)
		mm_want := mmRouteAllEvents.RouteAllEventsMock.defaultExpectation.params
		mm_got := IEventRouterMockRouteAllEventsParams{ctx, events}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRouteAllEvents.t.Errorf("IEventRouterMock.RouteAllEvents got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRouteAllEvents.RouteAllEventsMock.defaultExpectation.results
		if mm_results == nil {
			mmRouteAllEvents.t.Fatal("No results are set for the IEventRouterMock.RouteAllEvents")
		}
		return (*mm_results).err
	}
	if mmRouteAllEvents.funcRouteAllEvents != nil {
		return mmRouteAllEvents.funcRouteAllEvents(ctx, events)
	}
	mmRouteAllEvents.t.Fatalf("Unexpected call to IEventRouterMock.RouteAllEvents. %v %v", ctx, events)
	return
}

// RouteAllEventsAfterCounter returns a count of finished IEventRouterMock.RouteAllEvents invocations
func (mmRouteAllEvents *IEventRouterMock) RouteAllEventsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRouteAllEvents.afterRouteAllEventsCounter)
}

// RouteAllEventsBeforeCounter returns a count of IEventRouterMock.RouteAllEvents invocations
func (mmRouteAllEvents *IEventRouterMock) RouteAllEventsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRouteAllEvents.beforeRouteAllEventsCounter)
}

// Calls returns a list of arguments used in each call to IEventRouterMock.RouteAllEvents.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRouteAllEvents *mIEventRouterMockRouteAllEvents) Calls() []*IEventRouterMockRouteAllEventsParams {
	mmRouteAllEvents.mutex.RLock()

	argCopy := make([]*IEventRouterMockRouteAllEventsParams, len(mmRouteAllEvents.callArgs))
	copy(argCopy, mmRouteAllEvents.callArgs)

	mmRouteAllEvents.mutex.RUnlock()

	return argCopy
}

// MinimockRouteAllEventsDone returns true if the count of the RouteAllEvents invocations corresponds
// the number of defined expectations
func (m *IEventRouterMock) MinimockRouteAllEventsDone() bool {
	for _, e := range m.RouteAllEventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RouteAllEventsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRouteAllEventsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRouteAllEvents != nil && mm_atomic.LoadUint64(&m.afterRouteAllEventsCounter) < 1 {
		return false
	}
	return true
}

// MinimockRouteAllEventsInspect logs each unmet expectation
func (m *IEventRouterMock) MinimockRouteAllEventsInspect() {
	for _, e := range m.RouteAllEventsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IEventRouterMock.RouteAllEvents with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RouteAllEventsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRouteAllEventsCounter) < 1 {
		if m.RouteAllEventsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IEventRouterMock.RouteAllEvents")
		} else {
			m.t.Errorf("Expected call to IEventRouterMock.RouteAllEvents with params: %#v", *m.RouteAllEventsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRouteAllEvents != nil && mm_atomic.LoadUint64(&m.afterRouteAllEventsCounter) < 1 {
		m.t.Error("Expected call to IEventRouterMock.RouteAllEvents")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IEventRouterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRouteAllEventsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IEventRouterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IEventRouterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRouteAllEventsDone()
}
