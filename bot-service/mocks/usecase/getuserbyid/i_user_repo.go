package getuserbyid

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"main/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// IUserRepoMock implements getuserbyid.iUserRepo
type IUserRepoMock struct {
	t minimock.Tester

	funcGetUserByID          func(userID uuid.UUID) (up1 *domain.User, err error)
	inspectFuncGetUserByID   func(userID uuid.UUID)
	afterGetUserByIDCounter  uint64
	beforeGetUserByIDCounter uint64
	GetUserByIDMock          mIUserRepoMockGetUserByID
}

// NewIUserRepoMock returns a mock for getuserbyid.iUserRepo
func NewIUserRepoMock(t minimock.Tester) *IUserRepoMock {
	m := &IUserRepoMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetUserByIDMock = mIUserRepoMockGetUserByID{mock: m}
	m.GetUserByIDMock.callArgs = []*IUserRepoMockGetUserByIDParams{}

	return m
}

type mIUserRepoMockGetUserByID struct {
	mock               *IUserRepoMock
	defaultExpectation *IUserRepoMockGetUserByIDExpectation
	expectations       []*IUserRepoMockGetUserByIDExpectation

	callArgs []*IUserRepoMockGetUserByIDParams
	mutex    sync.RWMutex
}

// IUserRepoMockGetUserByIDExpectation specifies expectation struct of the iUserRepo.GetUserByID
type IUserRepoMockGetUserByIDExpectation struct {
	mock    *IUserRepoMock
	params  *IUserRepoMockGetUserByIDParams
	results *IUserRepoMockGetUserByIDResults
	Counter uint64
}

// IUserRepoMockGetUserByIDParams contains parameters of the iUserRepo.GetUserByID
type IUserRepoMockGetUserByIDParams struct {
	userID uuid.UUID
}

// IUserRepoMockGetUserByIDResults contains results of the iUserRepo.GetUserByID
type IUserRepoMockGetUserByIDResults struct {
	up1 *domain.User
	err error
}

// Expect sets up expected params for iUserRepo.GetUserByID
func (mmGetUserByID *mIUserRepoMockGetUserByID) Expect(userID uuid.UUID) *mIUserRepoMockGetUserByID {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("IUserRepoMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &IUserRepoMockGetUserByIDExpectation{}
	}

	mmGetUserByID.defaultExpectation.params = &IUserRepoMockGetUserByIDParams{userID}
	for _, e := range mmGetUserByID.expectations {
		if minimock.Equal(e.params, mmGetUserByID.defaultExpectation.params) {
			mmGetUserByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserByID.defaultExpectation.params)
		}
	}

	return mmGetUserByID
}

// Inspect accepts an inspector function that has same arguments as the iUserRepo.GetUserByID
func (mmGetUserByID *mIUserRepoMockGetUserByID) Inspect(f func(userID uuid.UUID)) *mIUserRepoMockGetUserByID {
	if mmGetUserByID.mock.inspectFuncGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("Inspect function is already set for IUserRepoMock.GetUserByID")
	}

	mmGetUserByID.mock.inspectFuncGetUserByID = f

	return mmGetUserByID
}

// Return sets up results that will be returned by iUserRepo.GetUserByID
func (mmGetUserByID *mIUserRepoMockGetUserByID) Return(up1 *domain.User, err error) *IUserRepoMock {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("IUserRepoMock.GetUserByID mock is already set by Set")
	}

	if mmGetUserByID.defaultExpectation == nil {
		mmGetUserByID.defaultExpectation = &IUserRepoMockGetUserByIDExpectation{mock: mmGetUserByID.mock}
	}
	mmGetUserByID.defaultExpectation.results = &IUserRepoMockGetUserByIDResults{up1, err}
	return mmGetUserByID.mock
}

// Set uses given function f to mock the iUserRepo.GetUserByID method
func (mmGetUserByID *mIUserRepoMockGetUserByID) Set(f func(userID uuid.UUID) (up1 *domain.User, err error)) *IUserRepoMock {
	if mmGetUserByID.defaultExpectation != nil {
		mmGetUserByID.mock.t.Fatalf("Default expectation is already set for the iUserRepo.GetUserByID method")
	}

	if len(mmGetUserByID.expectations) > 0 {
		mmGetUserByID.mock.t.Fatalf("Some expectations are already set for the iUserRepo.GetUserByID method")
	}

	mmGetUserByID.mock.funcGetUserByID = f
	return mmGetUserByID.mock
}

// When sets expectation for the iUserRepo.GetUserByID which will trigger the result defined by the following
// Then helper
func (mmGetUserByID *mIUserRepoMockGetUserByID) When(userID uuid.UUID) *IUserRepoMockGetUserByIDExpectation {
	if mmGetUserByID.mock.funcGetUserByID != nil {
		mmGetUserByID.mock.t.Fatalf("IUserRepoMock.GetUserByID mock is already set by Set")
	}

	expectation := &IUserRepoMockGetUserByIDExpectation{
		mock:   mmGetUserByID.mock,
		params: &IUserRepoMockGetUserByIDParams{userID},
	}
	mmGetUserByID.expectations = append(mmGetUserByID.expectations, expectation)
	return expectation
}

// Then sets up iUserRepo.GetUserByID return parameters for the expectation previously defined by the When method
func (e *IUserRepoMockGetUserByIDExpectation) Then(up1 *domain.User, err error) *IUserRepoMock {
	e.results = &IUserRepoMockGetUserByIDResults{up1, err}
	return e.mock
}

// GetUserByID implements getuserbyid.iUserRepo
func (mmGetUserByID *IUserRepoMock) GetUserByID(userID uuid.UUID) (up1 *domain.User, err error) {
	mm_atomic.AddUint64(&mmGetUserByID.beforeGetUserByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserByID.afterGetUserByIDCounter, 1)

	if mmGetUserByID.inspectFuncGetUserByID != nil {
		mmGetUserByID.inspectFuncGetUserByID(userID)
	}

	mm_params := &IUserRepoMockGetUserByIDParams{userID}

	// Record call args
	mmGetUserByID.GetUserByIDMock.mutex.Lock()
	mmGetUserByID.GetUserByIDMock.callArgs = append(mmGetUserByID.GetUserByIDMock.callArgs, mm_params)
	mmGetUserByID.GetUserByIDMock.mutex.Unlock()

	for _, e := range mmGetUserByID.GetUserByIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetUserByID.GetUserByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserByID.GetUserByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserByID.GetUserByIDMock.defaultExpectation.params
		mm_got := IUserRepoMockGetUserByIDParams{userID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserByID.t.Errorf("IUserRepoMock.GetUserByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserByID.GetUserByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserByID.t.Fatal("No results are set for the IUserRepoMock.GetUserByID")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetUserByID.funcGetUserByID != nil {
		return mmGetUserByID.funcGetUserByID(userID)
	}
	mmGetUserByID.t.Fatalf("Unexpected call to IUserRepoMock.GetUserByID. %v", userID)
	return
}

// GetUserByIDAfterCounter returns a count of finished IUserRepoMock.GetUserByID invocations
func (mmGetUserByID *IUserRepoMock) GetUserByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.afterGetUserByIDCounter)
}

// GetUserByIDBeforeCounter returns a count of IUserRepoMock.GetUserByID invocations
func (mmGetUserByID *IUserRepoMock) GetUserByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserByID.beforeGetUserByIDCounter)
}

// Calls returns a list of arguments used in each call to IUserRepoMock.GetUserByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserByID *mIUserRepoMockGetUserByID) Calls() []*IUserRepoMockGetUserByIDParams {
	mmGetUserByID.mutex.RLock()

	argCopy := make([]*IUserRepoMockGetUserByIDParams, len(mmGetUserByID.callArgs))
	copy(argCopy, mmGetUserByID.callArgs)

	mmGetUserByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserByIDDone returns true if the count of the GetUserByID invocations corresponds
// the number of defined expectations
func (m *IUserRepoMock) MinimockGetUserByIDDone() bool {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUserByIDInspect logs each unmet expectation
func (m *IUserRepoMock) MinimockGetUserByIDInspect() {
	for _, e := range m.GetUserByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepoMock.GetUserByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		if m.GetUserByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepoMock.GetUserByID")
		} else {
			m.t.Errorf("Expected call to IUserRepoMock.GetUserByID with params: %#v", *m.GetUserByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserByID != nil && mm_atomic.LoadUint64(&m.afterGetUserByIDCounter) < 1 {
		m.t.Error("Expected call to IUserRepoMock.GetUserByID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserRepoMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetUserByIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetUserByIDDone()
}
