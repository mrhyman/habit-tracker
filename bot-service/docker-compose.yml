version: "3.9"

networks:
  common:
    driver: bridge

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "postgres"
    volumes:
      - bot-service-pg-volume:/var/lib/postgresql/data
    container_name: bot-service-postgres
  pgbouncer:
    image: bitnami/pgbouncer:1.21.0
    environment:
      POSTGRESQL_HOST: "bot-service-postgres"
      POSTGRESQL_PORT: "5432"
      POSTGRESQL_USERNAME: "postgres"
      POSTGRESQL_PASSWORD: "postgres"
      POSTGRESQL_DATABASE: "postgres"
      PGBOUNCER_PORT: "6432"
      PGBOUNCER_IGNORE_STARTUP_PARAMETERS: "extra_float_digits"
    ports:
      - "5432:6432" # For migrations, tern on Windows ignores config port
      - "6432:6432"
    container_name: bot-service-pgbouncer
  kafka:
    container_name: eventbus
    image: 'bitnami/kafka:3.4'
    ports:
      - '6502:9094'
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@eventbus:9093
      # Listeners
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://eventbus:9092,EXTERNAL://localhost:6502
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: [ "CMD-SHELL", "eventbus-topics.sh --bootstrap-server localhost:9092 --list" ]
      interval: 3s
      timeout: 10s
      retries: 5
  kafka-ui:
    container_name: eventbus-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "7500:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: eventbus
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: eventbus:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka:6502
    healthcheck:
      test: nc -z localhost 8080 || exit -1
      interval: 3s
      timeout: 10s
      retries: 5
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      ENV: "prod"
    ports:
      - "8080:8080"
    container_name: bot-service

volumes:
  bot-service-pg-volume:
